datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系字段
  sentMessages     Message[]         @relation("SentMessages")
  receivedMessages Message[]         @relation("ReceivedMessages")
  sentRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  friends          Friend[]          @relation("UserFriends")
  friendsOf        Friend[]          @relation("FriendedByUsers")
  chats            ChatParticipant[]
}

model Message {
  id        Int           @id @default(autoincrement())
  content   String        @db.Text // 使用 Text 类型，不限制长度
  type      MessageType   @default(TEXT)
  status    MessageStatus @default(SENT)
  metadata  Json? // 存储不同类型消息的额外信息
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // 关系
  senderId   Int
  sender     User @relation("SentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chatId     Int
  chat       Chat @relation(fields: [chatId], references: [id])
}

model Chat {
  id        Int      @id @default(autoincrement())
  name      String?
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  messages     Message[]
  participants ChatParticipant[]
}

model ChatParticipant {
  id       Int      @id @default(autoincrement())
  userId   Int
  chatId   Int
  joinedAt DateTime @default(now())

  // 关系
  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

// 好友请求
model FriendRequest {
  id        Int                 @id @default(autoincrement())
  fromId    Int
  toId      Int
  status    FriendRequestStatus @default(PENDING)
  message   String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // 关系
  from User @relation("SentFriendRequests", fields: [fromId], references: [id])
  to   User @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

// 好友关系
model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  // 关系
  user   User @relation("UserFriends", fields: [userId], references: [id], map: "Friend_user_fkey")
  friend User @relation("FriendedByUsers", fields: [friendId], references: [id], map: "Friend_friend_fkey")

  @@unique([userId, friendId])
}

enum ChatType {
  DIRECT
  GROUP
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum MessageType {
  TEXT
  VOICE
  FILE
  LINK
  IMAGE
  VIDEO
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
