datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  avatar       String?
  employeeId   String?       @unique // 工号，可选且唯一
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dutyName     String? // 职务名称
  organization Organization? @relation("UserToOrg", fields: [orgId], references: [id])
  orgId        String?

  // 关系字段
  sentMessages       Message[]            @relation("SentMessages")
  receivedMessages   Message[]            @relation("ReceivedMessages")
  sentRequests       FriendRequest[]      @relation("SentFriendRequests")
  receivedRequests   FriendRequest[]      @relation("ReceivedFriendRequests")
  friends            Friend[]             @relation("UserFriends")
  friendsOf          Friend[]             @relation("FriendedByUsers")
  chats              ChatParticipant[]
  createdMeetings    Meeting[]            @relation("CreatedMeetings")
  meetingParticipant MeetingParticipant[]

  // 添加文档相关的关联
  createdDocuments       Document[]             @relation("CreatedDocuments")
  documentOperations     DocumentOperation[]    @relation("UserOperations")
  documentCollaborations DocumentCollaborator[] @relation("UserCollaborations")

  // 用户创建和编辑的文档
  lastEditDocuments Document[]          @relation("LastEditedDocuments")
  DocumentOperation DocumentOperation[]

  @@map("User")
}

model Message {
  id        Int           @id @default(autoincrement())
  content   String        @db.Text // 使用 Text 类型，不限制长度
  type      MessageType   @default(TEXT)
  status    MessageStatus @default(SENT)
  metadata  Json? // 存储不同类型消息的额外信息
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // 关系
  senderId   Int
  sender     User @relation("SentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chatId     Int
  chat       Chat @relation(fields: [chatId], references: [id])
}

model Chat {
  id        Int      @id @default(autoincrement())
  name      String?
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  messages     Message[]
  participants ChatParticipant[]
}

model ChatParticipant {
  id       Int      @id @default(autoincrement())
  userId   Int
  chatId   Int
  joinedAt DateTime @default(now())

  // 关系
  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

// 好友请求
model FriendRequest {
  id        Int                 @id @default(autoincrement())
  fromId    Int
  toId      Int
  status    FriendRequestStatus @default(PENDING)
  message   String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // 关系
  from User @relation("SentFriendRequests", fields: [fromId], references: [id])
  to   User @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

// 好友关系
model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  // 关系
  user   User @relation("UserFriends", fields: [userId], references: [id], map: "Friend_user_fkey")
  friend User @relation("FriendedByUsers", fields: [friendId], references: [id], map: "Friend_friend_fkey")

  @@unique([userId, friendId])
}

// 组织架构表
model Organization {
  id        String         @id
  name      String
  type      Int // 2: 公司, 1: 部门
  order     Int
  parentId  String? // 父组织ID
  parent    Organization?  @relation("OrgToOrg", fields: [parentId], references: [id])
  children  Organization[] @relation("OrgToOrg")
  users     User[]         @relation("UserToOrg")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([parentId])
  @@map("organizations")
}

enum ChatType {
  DIRECT
  GROUP
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum MessageType {
  TEXT
  VOICE
  FILE
  LINK
  IMAGE
  VIDEO
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Meeting {
  id           String               @id @default(uuid())
  title        String
  createdBy    Int
  creator      User                 @relation("CreatedMeetings", fields: [createdBy], references: [id])
  status       MeetingStatus        @default(ACTIVE)
  startTime    DateTime             @default(now())
  endTime      DateTime?
  participants MeetingParticipant[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("meetings")
}

model MeetingParticipant {
  id        Int             @id @default(autoincrement())
  meetingId String
  userId    Int
  joinTime  DateTime        @default(now())
  leaveTime DateTime?
  role      ParticipantRole @default(ATTENDEE)

  meeting Meeting @relation(fields: [meetingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([meetingId, userId])
  @@map("meeting_participants")
}

enum MeetingStatus {
  ACTIVE
  ENDED
}

enum ParticipantRole {
  HOST
  CO_HOST
  ATTENDEE
}

model Document {
  id        String   @id @default(uuid())
  title     String
  content   String?  @db.Text
  type      String // 'text' | 'excel'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 创建者和最后编辑者
  creatorId    Int   @default(1)
  creator      User  @relation("CreatedDocuments", fields: [creatorId], references: [id])
  lastEditById Int?
  lastEditBy   User? @relation("LastEditedDocuments", fields: [lastEditById], references: [id])

  // 操作记录和协作者
  operations        DocumentOperation[]    @relation("DocumentOperations")
  collaborators     DocumentCollaborator[] @relation("DocumentCollaborators")
  DocumentOperation DocumentOperation[]

  @@index([creatorId])
  @@index([lastEditById])
}

model DocumentOperation {
  id         Int      @id @default(autoincrement())
  documentId String
  userId     Int
  operation  String // 操作内容
  createdAt  DateTime @default(now())

  // 关系
  document Document @relation("DocumentOperations", fields: [documentId], references: [id])
  user     User     @relation("UserOperations", fields: [userId], references: [id])
  User     User     @relation(fields: [userId], references: [id])
  Document Document @relation(fields: [documentId], references: [id])

  @@index([documentId])
  @@index([userId])
}

model DocumentCollaborator {
  documentId String
  userId     Int
  role       String // 'editor' 或 'viewer'
  joinedAt   DateTime @default(now())

  document Document @relation("DocumentCollaborators", fields: [documentId], references: [id])
  user     User     @relation("UserCollaborations", fields: [userId], references: [id])

  @@id([documentId, userId])
  @@index([userId])
}
